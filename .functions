#!/usr/bin/env bash

function lfuncs() {
	divider="============================================================================"
	divider=$divider$divider

	header="\n %-10s %-20s %s\n"
	format=" %-10s %-20s %s\n"

	width=75

	printf "$header" "CMD" "ARGS" "DESCRIPTION"

	printf "%$width.${width}s\n" "$divider"

	printf "$format" \
	devmux none  "Tmux a new htop session" \
	mkd none "Create directory and enter it" \
	fs "[dir|file]" "Print size of a file or total size of a dir" \
	dataurl none "TODO: fix and document" \
	server none "TODO: fix and document" \
	gz file "Compare original and gzipped file size" \
	getcerts "url" "Show all certs in SSL certificate" \
	o "[loc|null]" "Opens dir or given location" \
	tre "none" "Short for tree w/ color & hidden files" \
	loopc "[delay] in sec" "E.g. loopc 5 echo 'foo'" \
	fif "[dir]" "find string in folder" \
	weather "[loc]" "Get weather for location" \
	gcommit none "Get the last commit SHA" \
	randline "[file]" "Get a random line from file" \
	proxyon none "Turn work proxy on" \
	proxyoff none "Turn work proxy off" \
	initauth "[env]" "Get a work accessToken" \
}

function laliases() {	hi
	divider="============================================================================"
	divider=$divider$divider

	header="\n %-2s %s\n"
	format=" %-25s %s\n"

	width=75

	printf "$header" "Alias" "DESCRIPTION"

	printf "%$width.${width}s\n" "$divider"

	printf "$format" \
	".."  "E.g. do '..' instead of 'cd ..'" \
	fd "Find command" \
	h "Get formatted history of commands" \
	d "Go to Dropbox folder" \
	dl "Go to Downloads folder" \
	dt "Go to Desktop folder" \
	p "Go to Project folder" \
	g "Git cmd shortened to 'g'" \
	gca "Git add and git commit -m \$1" \
	emptybin "Chuck the bin!" \
	hidedesktop "Hide all desktop icons, useful when presenting" \
	showdesktop "Restore all desktop icons" \
	mergepdf "Usage: mergepdf input{1,2,3}.pdf" \
	spotoff "Disable Spotlight" \
	spoton "Enable Spotlight" \
	map "Usage find . -name index.ts | map dirname" \
	GET "LWP simple user agent E.g. GET google.com" \
	stfu "Mute volume" \
	pumpupthejam "Pump up the Jam" \
	chromekill "Kill all the tabs in Chrome to free up memory" \
	afk "Lock the screen when going away from the keys" \
	reload "Reload the zshrc shell" \
	path "Print each path entry on a separate line" \
	ascii "Open the ascii manual, you know, to nerd out" \
	cafe "caffeinate" \
	javav "Get the java version" \
	"java[0-9]{1,}" "Use an installed java version (probs 8 or 12)" \
	goland  "Open dir or path in goland" \
	webstorm  "Open dir or path in webstorm"
}

function devmux() {
    tmux new-session -d 'vim'
    tmux split-window -v 'htop'
    tmux -2 attach-session -d
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# TODO: fix this
# Create a data URL from a file ex: data:text/plain;charset=utf-8;base64,IyBSZWNvbW1lb...
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# TODO: fix this
# Start an HTTP server from a directory, optionally specifying the port
function server() {
	port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python3 -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcerts() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules' --dirsfirst "$@" | less -FRNX;
}

# Run a command repeatedly in a loop, with a delay (defaults to 1 sec).
# Usage:
#   loop [delay] single_command [args]
#   loopc [delay] 'command1 [args]; command2 [args]; ...'
# Note, these do the same thing:
#   loop 5 bash -c 'echo foo; echo bar;
#   loopc 5 'echo foo; echo bar'
function loopc() { loop "$@"; }
function loop() {
  local caller=$(caller 0 | awk '{print $2}')
  local delay=1
  if [[ $1 =~ ^[0-9]*(\.[0-9]+)?$ ]]; then
    delay=$1
    shift
  fi
  while true; do
    if [[ "$caller" == "loopc" ]]; then
      bash -c "$@"
    else
      "$@"
    fi
    sleep $delay
  done
}

# Find in Folder, pass in an argument
function fif() {
  if [ ! "$#" -ge 1 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages $1 | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 $1 || rg --ignore-case --pretty --context 10 $1 {}"
}

# Curl the weather in a specific location
# Example: weather Sydney
function weather(){
    if [ "$#" -lt 1 ]
    then
      echo "Usage:  weather sydney"
    else
        for location in $@;
            do
                echo "Getting weather in: ${location}"
                curl wttr.in/${location}
            done
    fi
}

function gcommit() {
    local c=$(git log --pretty=format:'%h' -n 1)
    echo $c
}

function randline () {
    integer z=$(wc -l <$1)
    sed -n $[RANDOM % z + 1]p $1
}

function proxyon {
	# Set proxy system variables
	http_proxy=$WORK_PROXY_URL
    no_proxy=localhost,127.0.0.1
    HTTP_PROXY=$http_proxy

    export http_proxy
    export no_proxy
    export HTTP_PROXY

    # Git configuration for internet proxy
    git config --global http.proxy $http_proxy

    # ~/.curlrc
    echo "proxy = ${http_proxy}" > ~/.curlrc

    # ~/.npmrc
    npm config set proxy $http_proxy

    echo "Proxy is ON"
}

function proxyoff {
    git config --global --unset http.proxy

    unset http_proxy
	unset HTTP_PROXY

    echo "" > ~/.curlrc

    npm config delete proxy

    echo "Proxy is OFF"
}
